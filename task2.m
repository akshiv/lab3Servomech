clear; close all;
load('Task2.mat');
[fitresult, gof] = createFit(Mean2V, dTheta, STDdTheta, STD2V);

function [fitresult, gof] = createFit(Mean2V, dTheta, STDdTheta, STD2V)
%CREATEFIT(MEAN2V,DTHETA,STDDTHETA)
%  Create a fit.
%
%  Data for 'TachometerFit' fit:
%      X Input : Mean2V
%      Y Output: dTheta
%      Weights : STDdTheta
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 20-Nov-2017 23:13:32


%% Fit: 'TachometerFit'.
[xData, yData, weights] = prepareCurveData( Mean2V, dTheta, STDdTheta);

% Set up fittype and options.
ft = fittype( 'poly1' );
opts = fitoptions( 'Method', 'LinearLeastSquares' );
opts.Weights = weights;

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'TachometerFit' );
h = plot( fitresult, xData, yData );
hold on
legend( h, 'dTheta vs. Mean2V with STDdTheta', 'TachometerFit' );
% Label axes
e  = errorbar(xData, yData, STDdTheta/2, STDdTheta/2, STD2V/2, STD2V/2, 'r.');
e.LineWidth = 1.5;

ax = gca;
ax.FontName = 'LaTeX';
ax.TickLabelInterpreter = 'LaTeX';
ax.FontSize = 18;
ax.XColor = 'k';
ax.YColor = 'k';

ax.YLabel.String = ('Tachometer Voltage V_t (V)');
ax.YLabel.FontSize = 16;
ax.YLabel.FontWeight = 'bold';
ax.YLabel.Color = 'k';

ax.XLabel.String = ('Voltage Input V_i (V)');
ax.XLabel.FontSize = 16;
ax.XLabel.FontWeight = 'bold';
ax.XLabel.Color = 'k';

ax.Box = 'off';
ax.LineWidth = 1.5;
ax.YGrid = 'on';
ax.XMinorTick = 'on';
ax.YMinorTick = 'on';

t = title('Finding the Tachometer Constant');
t.Color = 'k';
t.Interpreter = 'LaTeX';
t.FontSize = 24;

end