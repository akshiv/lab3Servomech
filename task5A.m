clear; close all;
load('task5A.mat');
weights = abs(STDCH3V);

[fitresult, gof] = createFit(CH1V, OPotDeg, weights, STDOPotDeg, STDCH1V);

function [fitresult, gof] = createFit(CH1V, OPotDeg, weights, STDOPotDeg, STDCH1V)
    %CREATEFIT(CH1V,OPOTDEG,WEIGHTS)
    %  Create a fit.
    %
    %  Data for 'Finding kp' fit:
    %      X Input : CH1V
    %      Y Output: OPotDeg
    %      Weights : weights
    %  Output:
    %      fitresult : a fit object representing the fit.
    %      gof : structure with goodness-of fit info.
    %
    %  See also FIT, CFIT, SFIT.

    %  Auto-generated by MATLAB on 21-Nov-2017 11:18:10


    %% Fit: 'Finding kp'.
    [xData, yData, weights_1] = prepareCurveData( CH1V, OPotDeg, weights );

    % Set up fittype and options.
    ft = fittype( 'poly1' );
    opts = fitoptions( 'Method', 'LinearLeastSquares' );
    opts.Weights = weights_1;

    % Fit model to data.
    [fitresult, gof] = fit( xData, yData, ft, opts );

    % Plot fit with data.
    figure( 'Name', 'Finding kp' );
    h = plot( fitresult, xData, yData );
    hold on;
    legend( h, 'OPotDeg vs. CH1V with weights', 'Finding kp', 'Location', 'Best' );
    % Label axes
    e  = errorbar(xData, yData, STDCH1V/2, STDCH1V/2, STDOPotDeg/2, STDOPotDeg/2, 'r.');
    e.LineWidth = 1.5;

    ax = gca;
    ax.FontName = 'LaTeX';
    ax.TickLabelInterpreter = 'LaTeX';
    ax.FontSize = 18;
    ax.XColor = 'k';
    ax.YColor = 'k';

    ax.YLabel.String = ('Shaft Angle (degrees)');
    ax.YLabel.FontSize = 16;
    ax.YLabel.FontWeight = 'bold';
    ax.YLabel.Color = 'k';

    ax.XLabel.String = ('Voltage Output (V)');
    ax.XLabel.FontSize = 16;
    ax.XLabel.FontWeight = 'bold';
    ax.XLabel.Color = 'k';
    %ax.XLim = [-4 4.5];

    ax.Box = 'off';
    ax.LineWidth = 1.5;
    ax.YGrid = 'on';
    ax.XMinorTick = 'on';
    ax.YMinorTick = 'on';

    t = title('Potentiometer Angle vs Voltage');
    t.Color = 'k';
    t.Interpreter = 'LaTeX';
    t.FontSize = 24;
end
